# 661. Image Smoother
## Description:
An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).

## Soltuion:

def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:
    ROWS, COLS = len(img), len(img[0])

    res = [[0] * COLS for _ in range(ROWS)]

    for row in range(ROWS):
        for col in range(COLS):
            total , cnt = 0, 0
            for i in range(row - 1, row + 2):
                for j in range(col - 1, col + 2):
                    if i < 0 or i == ROWS or j < 0 or j == COLS:
                        continue
                    total += img[i][j]
                    cnt += 1
            res[row][col] = total // cnt

    return res



#2970. Count the Number of Incremovable Subarrays I
Easy
Topics
Companies
Hint
You are given a 0-indexed array of positive integers nums.

A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.

Return the total number of incremovable subarrays of nums.

Note that an empty array is considered strictly increasing.

A subarray is a contiguous non-empty sequence of elements within an array.

# Solution:
def incremovableSubarrayCount(self, nums: List[int]) -> int:
    def good(arr):
        for x, y in zip(arr, arr[1:]):
            if x >= y:
                return False
        return True

    N = len(nums)
    cnt = 0
    for i in range(N):
        for j in range(i, N):
            x = []
            for k in range(N):
                if not (i <= k <= j):
                    x.append(nums[k])
            
            if good(x):
                cnt += 1

    return cnt


#1823. Find the Winner of the Circular Game
Solved
Medium
Topics
Companies
Hint
There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:

Start at the 1st friend.
Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
The last friend you counted leaves the circle and loses the game.
If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
Else, the last friend in the circle wins the game.
Given the number of friends, n, and an integer k, return the winner of the game.

#Solution:
def findTheWinner(self, n: int, k: int) -> int:
    res = 0
    for player_num in range(2, n+1):
        res = (res + k) % player_num

    return res + 1
